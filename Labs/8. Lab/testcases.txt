Последователни броеви Problem 1 (1 / 1)

Со помош на нанижано бинарно дрво потребно е да проверите дали при inorder изминување на дрвото важи дека секој следен елемент има вредност за 1 поголема од претходниот (треба да се испечати true или false). Притоа доколку ви е потребно можете да користите дополнителни функции, но не смеете да користите рекурзија и дополнителни структури.

Име на класата во Java: ConsecutiveNumbers

no poceten code

tc: 
8
0 48 ROOT
1 46 LEFT 0
2 45 LEFT 1
3 47 RIGHT 1
4 50 RIGHT 0
5 51 RIGHT 4
6 50 LEFT 5
7 52 RIGHT 5

false
---------------------------------------------
9
0 9 ROOT
1 8 LEFT 0
2 7 LEFT 1
3 6 LEFT 2
4 5 LEFT 3
5 1 LEFT 4
6 2 RIGHT 5
7 3 RIGHT 6
8 4 RIGHT 7

true
---------------------------------------------
7
0 1206 ROOT
1 1205 LEFT 0
2 1204 LEFT 1
3 1203 LEFT 2
4 1207 RIGHT 0
5 1208 RIGHT 4
6 1210 RIGHT 5

false
---------------------------------------------
17
0 10 ROOT
1 2 LEFT 0
2 1 LEFT 1
3 9 RIGHT 1
4 6 LEFT 3
5 4 LEFT 4
11 7 RIGHT 4
14 3 LEFT 5
13 5 RIGHT 5
6 16 RIGHT 0
7 17 RIGHT 6
8 12 LEFT 6
9 11 LEFT 8
10 14 RIGHT 8
15 13 LEFT 10
16 15 RIGHT 10
12 8 RIGHT 11

true
---------------------------------------------
10
0 68 ROOT
1 61 LEFT 0
8 60 LEFT 1
9 59 LEFT 8
2 65 RIGHT 1
3 63 LEFT 2
7 62 LEFT 3
4 64 RIGHT 3
5 66 RIGHT 2
6 67 RIGHT 5

true
---------------------------------------------
15
0 12 ROOT
1 8 LEFT 0
2 16 RIGHT 0
3 6 LEFT 1
4 10 RIGHT 1
5 14 LEFT 2
6 18 RIGHT 2
7 5 LEFT 3
8 7 RIGHT 3
9 9 LEFT 4
10 11 RIGHT 4
11 13 LEFT 5
12 15 RIGHT 5
13 17 LEFT 6
14 19 RIGHT 6

true
---------------------------------------------
17
0 11119 ROOT
1 11118 LEFT 0
2 11120 RIGHT 0
3 11114 LEFT 1
4 11124 RIGHT 2
5 11112 LEFT 3
6 11116 RIGHT 3
7 11122 LEFT 4
8 11126 RIGHT 4
9 11110 LEFT 5
10 11113 RIGHT 5
11 11115 LEFT 6
12 11117 RIGHT 6
13 11121 LEFT 7
14 11123 RIGHT 7
15 11125 LEFT 8
16 11127 RIGHT 8

false
---------------------------------------------
16
0 51 ROOT
1 50 LEFT 0
2 45 LEFT 1
6 46 RIGHT 2
7 48 RIGHT 6
8 47 LEFT 7
11 49 RIGHT 7
3 52 RIGHT 0
4 54 RIGHT 3
5 53 LEFT 4
9 55 RIGHT 4
10 56 LEFT 9
12 57 RIGHT 9
13 59 RIGHT 12
14 58 LEFT 13
15 60 RIGHT 13

false
---------------------------------------------
18
0 9 ROOT
1 1 LEFT 0
2 11 RIGHT 0
3 0 LEFT 1
4 3 RIGHT 1
5 10 LEFT 2
6 12 RIGHT 2
7 2 LEFT 4
8 5 RIGHT 4
9 16 RIGHT 6
10 4 LEFT 8
11 7 RIGHT 8
12 14 LEFT 9
13 17 RIGHT 9
14 13 LEFT 12
16 6 LEFT 11
15 15 RIGHT 12
17 8 RIGHT 11

true
---------------------------------------------
26
0 525 ROOT
1 522 LEFT 0
2 527 RIGHT 0
3 518 LEFT 1
4 523 RIGHT 1
7 517 LEFT 3
8 520 RIGHT 3
9 519 LEFT 8
10 521 RIGHT 8
11 524 RIGHT 4
6 536 RIGHT 2
5 526 LEFT 2
13 537 RIGHT 6
12 535 LEFT 6
14 531 LEFT 12
18 529 LEFT 14
19 533 RIGHT 14
22 528 LEFT 18
23 530 RIGHT 18
21 532 LEFT 19
20 534 RIGHT 19
15 540 RIGHT 13
24 539 LEFT 15
16 541 RIGHT 15
25 538 LEFT 24
17 542 RIGHT 16

true
---------------------------------------------


Black Friday Problem 2 (0 / 0)

Еден маркет за бела технка одлучил да ги спушти цените на своите производи еден работен петок дури до 80% по повод престојните Божикни празници. Поради оваа промоција јасно им било дека ќе има многу заинтересирани купувачи, па затоа одлучиле да воспостaват ред при влеувањето/излегувањето во маркетот. Купувачите влегуваат според времето на пристигнување. Потребно е да се пронајде колкав е максималниот број на купувачи кои ќе бидат присутни во маркетот. Во првата линија е даден бројот на купувачи кои чекаат да влезат, N. Секоја од наредните линии го означува часот и минутите на доаѓање на купувачот, како и колку време (во минути) ќе се задржи во маркетот, во формат: HH:MM d

За да се реализира оваа задача потребно е да се користи соодветна податочна структура со која со најмала сложеност ќе се постигне бараниот резултат. Притоа е обезбедено да не може да се случи во ист момент да има влегување односно излегување од маркетот. Маркетот работи до 23:59.

На излез треба да се испечати максималниот број купувачи кои што истовремено ќе бидат присутни во маркетот.

Име на класа во Java: BlackFriday


no poceten code

tc:
7
18:46 287
22:39 48
16:21 146
23:43 140
21:47 279
23:49 25
20:02 230

4
---------------------------------------------	
10
21:57 66
23:31 84
21:32 151
20:11 193
22:35 54
21:59 23
23:33 178
21:12 144
23:13 101
21:10 136

6 
---------------------------------------------
10
23:25 109
22:20 164
22:11 91
21:40 7
22:57 63
22:31 21
23:13 19
21:45 175
23:04 146
21:52 141

8
---------------------------------------------
15
23:25 52
23:05 217
21:12 188
20:43 73
20:49 300
21:45 133
22:22 287
20:34 49
23:40 63
21:31 288
23:35 142
21:30 61
21:28 105
21:29 37
22:56 144

10
---------------------------------------------
15
23:35 109
23:53 93
20:05 219
20:57 294
20:59 285
21:46 143
23:38 240
23:18 333
23:27 296
22:10 249
21:39 132
22:18 30
20:46 304
22:38 138
21:01 13

12
---------------------------------------------
25
22:17 358
23:17 19
22:32 199
22:30 239
20:01 9
22:38 164
21:09 69
22:27 290
23:23 275
20:23 185
22:00 189
22:25 317
20:55 131
21:54 345
23:53 296
20:38 61
22:33 17
22:05 133
20:28 214
23:10 126
21:47 262
23:39 93
23:51 297
22:39 54
22:34 66

17
---------------------------------------------
27
21:52 207
21:49 206
21:54 283
22:12 196
20:01 119
20:31 74
23:40 144
20:46 217
23:51 173
22:02 51
20:19 155
23:22 83
20:57 277
23:05 33
22:23 95
20:15 9
22:35 136
23:21 287
22:10 120
23:42 66
22:09 198
22:51 281
22:55 273
20:52 89
20:00 73
20:10 8
23:33 22

18
---------------------------------------------
32
22:01 135
21:36 270
23:28 18
21:12 126
21:38 188
23:23 270
23:19 94
22:18 10
23:09 32
22:49 130
20:41 234
23:52 30
21:07 287
21:01 291
21:47 53
22:21 284
20:25 125
23:37 130
20:34 214
22:45 20
20:55 260
21:08 106
23:35 257
20:15 45
22:59 242
21:31 65
20:52 107
22:43 144
21:03 14
21:40 189
22:31 204
21:11 184

21
---------------------------------------------
35
21:48 118
19:12 135
19:24 238
23:34 272
19:46 18
23:29 123
20:33 34
22:14 169
19:31 75
21:08 89
22:49 138
22:02 81
23:43 240
21:56 357
22:31 99
23:06 410
23:15 220
23:09 188
22:27 121
19:50 308
22:01 298
19:58 121
21:45 383
23:48 361
23:13 281
21:11 173
19:23 291
23:07 84
22:24 296
23:30 138
21:26 16
22:47 119
19:11 405
19:38 385
23:28 384

25
---------------------------------------------
50
20:37 19
23:22 222
23:47 329
20:00 18
22:54 27
20:44 220
23:31 205
22:57 105
20:49 333
22:08 338
23:16 274
23:09 250
21:48 258
21:47 32
23:37 3
23:51 194
21:09 193
22:07 94
22:23 360
23:46 189
22:03 285
20:03 47
21:25 73
22:51 289
22:06 112
22:21 148
21:32 287
23:19 272
23:32 269
23:14 326
20:14 269
21:01 30
20:45 71
23:15 269
23:45 78
20:43 232
20:24 80
22:56 167
23:34 283
22:04 9
21:27 61
23:11 259
21:36 253
23:24 93
22:16 238
21:00 86
21:28 308
21:07 214
22:55 8
22:01 21

34
---------------------------------------------
Бинарно пребарувачко дрво Problem 3 (0 / 0)

Да се напише рекурзивна функција за наоѓање на висината (V) на даден елемент од бинарно пребарувачко дрво (листовите имаат висина 1), а потоа да се испечати бројот на елементите кои се на длабочина V ( коренот има длабочина 0).

Најнапред се внесува бројот на темињата, па темињата, па вредноста на дадениот елемент од дрвото за кој треба да се пресмета висината. На излез се печати висината на елементот, а потоа во нов ред бројот на темиња на пресметаната длабочина.

Име на класата во Java: BinarnoDrvo

no poceten code

tc:
11
3
4
1
8
6
0
5
2
10
17
13
8

4
2
---------------------------------------------
3
4
1
2
2

1
1
---------------------------------------------
5
7
4
1
8
0
4

3
1
---------------------------------------------
16
77
52
84
29
73
82
63
9
2
3
7
69
89
11
34
45
11

1
2
---------------------------------------------
15
6
12
3
7
8
33
65
0
44
34
22
11
67
89
97
67

3
3
---------------------------------------------
2
1
2
1

2
0
---------------------------------------------
90
802
31
595
980
90
281
734
741
59
348
900
156
11
971
162
227
309
307
350
229
623
452
451
943
248
522
183
129
687
510
670
626
139
78
172
974
80
152
707
780
428
256
778
540
446
387
568
583
472
83
857
575
312
39
792
555
509
587
140
344
531
85
939
41
850
652
951
935
166
740
917
736
304
342
325
639
898
175
401
735
603
513
948
383
112
440
296
471
287
648
156

6
13
---------------------------------------------
1
1
1

1
0
---------------------------------------------
156
1718
1939
1463
353
536
1409
749
248
610
452
139
1084
910
1890
80
1327
567
155
187
1785
783
1916
757
1593
317
334
1003
1964
482
827
711
230
1616
442
1440
340
1406
104
1569
1835
1823
1468
175
1958
53
1299
1131
599
1854
495
52
1044
336
1356
208
1570
1028
914
237
118
1675
595
1970
1966
457
1719
1469
1408
637
1581
1243
384
1587
1605
782
89
1936
1207
866
475
1318
22
1126
689
60
1568
88
472
1159
1776
1129
446
450
369
1148
278
314
1357
1904
1240
1337
1764
1735
1540
445
456
1554
87
307
1637
1372
1398
1909
1902
272
1191
1070
1906
695
1680
1990
286
503
671
348
984
906
377
37
1046
1892
471
1526
1825
131
1790
423
1562
877
1061
1659
228
1960
367
1507
1787
1216
511
980
1384
1181
1830
1948
1496
929
541
783

5
17
---------------------------------------------
254
135
197
144
198
305
255
403
209
28
288
407
222
486
143
212
184
182
157
262
368
87
241
105
297
126
204
199
187
362
325
312
331
109
349
140
273
382
347
359
367
392
452
138
82
243
371
259
179
205
466
53
219
118
174
44
387
246
269
178
334
356
15
485
151
354
156
396
445
3
223
114
236
74
291
171
292
320
244
79
460
338
167
326
37
10
477
92
150
112
36
93
124
34
435
141
253
386
177
287
330
302
398
316
389
279
433
4
62
43
374
427
332
49
101
404
423
239
14
76
226
311
342
429
21
95
165
254
449
123
454
346
310
264
296
261
235
369
463
20
345
56
110
328
294
473
471
251
104
52
148
457
419
372
290
357
245
327
260
220
286
83
16
63
153
232
373
200
249
2
85
484
113
98
210
400
66
55
395
97
152
275
424
188
50
258
17
480
450
380
453
361
439
381
29
32
444
163
333
248
341
117
366
420
23
437
462
145
422
8
250
22
405
240
216
35
161
391
364
278
308
409
322
155
127
84
26
451
432
416
402
430
137
289
436
72
283
60
40
343
231
81
281
102
363
25
41
340
413
229
426
388
375
307
467
375

1
2
---------------------------------------------